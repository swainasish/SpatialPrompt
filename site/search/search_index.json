{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":""},{"location":"#using-conda","title":"Using conda","text":""},{"location":"#create-a-conda-environment-with-python-version-310","title":"Create a conda environment with Python version 3.10","text":"<pre><code>conda create -n spatialpromptENV python=3.10\n</code></pre>"},{"location":"#activate-the-environment","title":"activate the environment","text":"<pre><code>conda activate spatialpromptENV\n</code></pre>"},{"location":"#install-using-pip","title":"Install using pip","text":"<pre><code>pip install spatialprompt\n</code></pre>"},{"location":"#without-conda-using-pip-can-be-installed-directly","title":"Without conda, using pip can be installed directly","text":""},{"location":"#platforms-ubuntu-22042004-windows-1011-mac-os-ventura-python310-preferable","title":"Platforms : Ubuntu: 22.04/20.04, Windows: 10/11, Mac-OS: Ventura - Python:3.10 Preferable","text":"<pre><code>pip install spatialprompt\n</code></pre>"},{"location":"Documentation/Clustering/","title":"Clustering","text":""},{"location":"Documentation/Clustering/#spatial-clustering","title":"Spatial clustering","text":"<pre><code>spatialprompt.SpatialCluster.fit_predict(self,st_array,x_cord,y_cord,\n    n_neighbor=20,n_itr=3,n_cluster=\"auto\",n_hvgs=1000)\n</code></pre>"},{"location":"Documentation/Clustering/#description","title":"Description","text":"<p>This program perform spatial clustering for spatial data .</p>"},{"location":"Documentation/Clustering/#parameters","title":"Parameters","text":"<ul> <li><code>st_array</code>: Matrix of Spatial data, where rows are the cells and columns are the genes.</li> <li><code>x_cord</code>: X coordinate array of spatial data.</li> <li><code>y_cord</code>: Y coordinate array of spatial data.</li> <li><code>n_hvgs</code> (default=1000): Number of high variance genes to consider for analysis.</li> <li><code>n_neighbor</code> (default=45): Number of neighbors to consider for weighted mean expression calculation.</li> <li><code>n_itr</code> (default=3): Number of iterations message passing layer pull information from neighbors.</li> <li><code>n_cluster</code> (default:\"auto\"): Number of clusters needed to perform. </li> </ul>"},{"location":"Documentation/Clustering/#usage","title":"Usage","text":"<pre><code>import spatialprompt as sp\n\n# Create an instance of Spatialclustering\nclus_model = sp.SpatialCluster()\n\n# Example call to predict_cell_prop\ncortex_clus_annotations = clus_model.fit_predict(cortex_st_mat,\n                                            x_cor = cortex_x,\n                                            y_cor = cortex_y,\n                                            n_cluster=20)\n</code></pre>"},{"location":"Documentation/Deconvolution/","title":"Deconvolution","text":""},{"location":"Documentation/Deconvolution/#spatial-spot-deconvolution","title":"Spatial spot-deconvolution","text":"<pre><code>spatialprompt.SpatialDeconvolution.predict_cell_prop(sc_array, st_array,sc_genes, st_genes, sc_labels, x_cord, y_cord,\nn_hvgs=1000, min_cell=10, max_cell=15, return_prop=True,\nspot_ratio=[0.33, 0.33, 0.33], n_neighbor=45, n_itr=3)\n</code></pre>"},{"location":"Documentation/Deconvolution/#description","title":"Description","text":"<p>This program performs spot deconvolution in spatial data using scRNA-seq data reference.</p>"},{"location":"Documentation/Deconvolution/#parameters","title":"Parameters","text":"<ul> <li><code>sc_array</code>: Matrix of Single-cell data, where rows are the cells and columns are the genes.</li> <li><code>st_array</code>: Matrix of Spatial data, where rows are the cells and columns are the genes.</li> <li><code>sc_genes</code>: Gene names of the <code>sc_array</code> matrix.</li> <li><code>st_genes</code>: Gene names of the <code>st_array</code> matrix.</li> <li><code>sc_labels</code>: Cell type annotations of <code>sc_array</code>.</li> <li><code>x_cord</code>: X coordinate array of spatial data.</li> <li><code>y_cord</code>: Y coordinate array of spatial data.</li> <li><code>n_hvgs</code> (default=1000): Number of high variance genes to consider for analysis.</li> <li><code>min_cell</code> (default=10): Minimum number of cells to simulate the spatial spot.</li> <li><code>max_cell</code> (default=15): Maximum number of cells to simulate the spatial spot.</li> <li><code>return_prop</code> (default=True): Return proportions of cell types if true. Else return the cell type having a higher proportion.</li> <li><code>spot_ratio</code> (default=[0.33, 0.33, 0.33]): Ratio of proportions of spots to be simulated using criteria 1/2/3 mentioned in the paper. If the labels are ambiguous cell types (e.g., EX_L3_4_5 have cell types of L3 AND L4), then <code>spot_ratio</code> should be provided as a list, e.g., <code>[0, 0, 1]</code>.</li> <li><code>n_neighbor</code> (default=45): Number of neighbors to consider for weighted mean expression calculation.</li> <li><code>n_itr</code> (default=3): Number of iterations message passing layer pull information from neighbors.</li> </ul>"},{"location":"Documentation/Deconvolution/#usage","title":"Usage","text":"<pre><code>import spatialprompt as sp\n\n# Create an instance of Spatialdeconvolution \ndeconv_model = sp.SpatialDeconvolution()\n\n# Example call to predict_cell_prop\nresult = deconv_model.predict_cell_prop(sc_array, st_array, \n                              sc_genes,  st_genes, \n                              sc_labels, \n                              x_cord, y_cord)\n</code></pre>"},{"location":"Documentation/Installation/","title":"Installation","text":""},{"location":"Documentation/Installation/#using-conda","title":"Using conda","text":""},{"location":"Documentation/Installation/#create-a-conda-environment-with-python-version-310","title":"Create a conda environment with Python version 3.10","text":"<pre><code>conda create -n spatialpromptENV python=3.10\n</code></pre>"},{"location":"Documentation/Installation/#activate-the-environment","title":"activate the environment","text":"<pre><code>conda activate spatialpromptENV\n</code></pre>"},{"location":"Documentation/Installation/#install-using-pip","title":"Install using pip","text":"<pre><code>pip install spatialprompt\n</code></pre>"},{"location":"Documentation/Installation/#without-conda-using-pip-can-be-installed-directly","title":"Without conda, using pip can be installed directly","text":""},{"location":"Documentation/Installation/#platforms-ubuntu-22042004-windows-1011-mac-os-ventura-python310-preferable","title":"Platforms : Ubuntu: 22.04/20.04, Windows: 10/11, Mac-OS: Ventura - Python:3.10 Preferable","text":"<pre><code>pip install spatialprompt\n</code></pre>"},{"location":"SpatialPromptDB/Mouse%20references/","title":"Mouse references","text":"Tissue Download Bladder Download Fat Download Heart and Aorta Download Kidney Download Large Intestine Download Limb muscle Download Liver Download Lung Download Mammary Gland Download Marrow Download Pancreas Download Skin Download Spleen Download Thymus Download Tongue Download Trachea Download"},{"location":"SpatialPromptDB/human%20references/","title":"Human references","text":"Tissue Download Bladder Download Blood Download Bone marrow Download Eye Download Fat Download Heart Download Kidney Download Large Intestine Download Liver Download Lung Download Lymph Download Mammary Download Muscle Download Pancrease Download Prostate Download Salivary Download Skin Download Small Intestine Download Spleen Download Thymus Download Tongue Download Trachea Download Uterus Download Vascular Download"},{"location":"Tutorials/Tutorial_1_SpatialPrompt/","title":"Tutorial.1.Mouse-cortex-Visium","text":"<p>In this tutorial, we will perform spatial deconvolution and spatial clustering using 10X Visium mouse cortex dataset. The cortex Visium dataset can be obtain on the 10X-database. scRNA-seq reference obtained from Allen Institute, generated with the SMART-Seq2 protocol (GSE71585). </p> <p>Install Basic packages</p> <pre><code>!pip install scanpy\n!pip install spatialprompt\n</code></pre> <pre><code>Installing collected packages: grapheme, about-time, alive_progress, spatialprompt\nSuccessfully installed about-time-4.2.1 alive_progress-3.1.4 grapheme-0.6.0 spatialprompt-0.0.4\n</code></pre> <p>Import major libraries</p> <pre><code>import pandas as pd\nimport scanpy as sc\nimport spatialprompt as sp\nimport numpy as np\nimport urllib\n</code></pre> <p>We will use mouse cortex Visium dataset and correspond single cell data</p> <pre><code>urllib.request.urlretrieve(\"https://drive.google.com/uc?id=1TjCV0uV8Qx0qbT-3mt_XhQ4BK51TH8Mn\", filename=\"sc_m_cortex.gz\")\nurllib.request.urlretrieve(\"https://drive.google.com/uc?id=11Diy9cKbVvfChK5VuGtxZWi0taH_7gqZ\", filename=\"st_m_cortex.gz\")\n</code></pre> <pre><code>('st_m_cortex.gz', &lt;http.client.HTTPMessage at 0x7f1401d04580&gt;)\n</code></pre> <pre><code>!gunzip  sc_m_cortex.gz\n!gunzip  st_m_cortex.gz\n</code></pre> <pre><code>sc_data = sc.read_h5ad(\"sc_m_cortex\")\nst_data = sc.read_h5ad(\"st_m_cortex\")\n</code></pre> <pre><code>/usr/local/lib/python3.10/dist-packages/anndata/_core/anndata.py:121: ImplicitModificationWarning: Transforming to str index.\n  warnings.warn(\"Transforming to str index.\", ImplicitModificationWarning)\n</code></pre> <p>Basic process and visualise the scanpy object</p> <pre><code>sc.pp.calculate_qc_metrics(st_data,inplace=True)\n</code></pre> <pre><code>sc.pl.spatial(st_data,color=\"total_counts\",\n              library_id='V1_Mouse_Brain_Sagittal_Anterior')\n</code></pre> <p></p> <p>Extract all the data-required for SpatialPrompt \\ Required inputs</p> <ol> <li>scRNA-seq reference matrix (sc_df) (numpy array will be preferred)</li> <li>sc_df gene names (sc_genes)</li> <li>sc_df cell-type annotations (sc_labels)</li> <li>Spatial reference matrix (st_df)</li> <li>st_df gene names (st_genes)</li> <li>spatial x and y coordinate (st_X, st_Y)</li> </ol> <pre><code>sc_df = sc_data.X\nsc_genes = sc_data.var_names\nsc_labels = sc_data.obs.loc[:,\"label\"]\nst_df = st_data.X.toarray()\nst_genes = st_data.var_names\nst_X = st_data.obs.array_row\nst_Y = st_data.obs.array_col\n</code></pre> <p>Perform spatial deconvolution</p> <pre><code>deconvolution_model = sp.SpatialDeconvolution()\n</code></pre> <pre><code>cortex_predict = deconvolution_model.predict_cell_prop(sc_array = sc_df,\n                                                       st_array = st_df,\n                                                       sc_genes = sc_genes,\n                                                       st_genes = st_genes,\n                                                       sc_labels = sc_labels,\n                                                       x_cord = st_X,\n                                                       y_cord = st_Y)\n</code></pre> <pre><code>Preprocessing Datasets : |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [100%] in 0.3s (22.32/s) \n1337 Common Genes Found 1000 HVGs Retained\nSimulate Spatial Spots : |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25584/25584 [100%] in 16.9s (1516.48/s) \n25584 Spatial Spots Simulated\nCapturing spatial microenvironment relation: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [100%] in 12.0s (0.42/s) \nSpot Denvolution: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [100%] in 15.6s (0.32/s) \nTotal Time spent: 44.90159010887146 Sec\n</code></pre> <p>Visualising the results</p> <pre><code>#Insert the cell type proportions into the spatial object\nfor i in cortex_predict.columns:\n    st_data.obs.loc[:,i] = np.array(cortex_predict.loc[:,i])\n</code></pre> <pre><code>st_data\n</code></pre> <pre><code>AnnData object with n_obs \u00d7 n_vars = 2597 \u00d7 1337\n    obs: 'in_tissue', 'array_row', 'array_col', 'library_id', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'Astro', 'CR', 'Endo', 'L2/3 IT', 'L4', 'L5 IT', 'L5 PT', 'L6 CT', 'L6 IT', 'L6b', 'Lamp5', 'Macrophage', 'Meis2', 'NP', 'No Class', 'Oligo', 'Peri', 'Pvalb', 'SMC', 'Serpinf1', 'Sncg', 'Sst', 'VLMC', 'Vip'\n    var: 'gene_ids', 'feature_types', 'genome', 'mt', 'hb', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_mean_counts', 'log1p_total_counts'\n    uns: '_scvi_manager_uuid', '_scvi_uuid', 'clusters_colors', 'leiden', 'library_id_colors', 'neighbors', 'spatial', 'umap'\n    obsm: 'X_pca', 'X_umap', 'deconvolution', 'spatial'\n    layers: 'counts'\n    obsp: 'connectivities', 'distances'\n</code></pre> <pre><code>sc.pl.spatial(st_data,\n              color=(\"total_counts\",\"L2/3 IT\", 'L4', 'L5 IT', 'L5 PT', 'L6 CT', 'L6b',\"Oligo\"),\n              library_id='V1_Mouse_Brain_Sagittal_Anterior')\n</code></pre> <p></p> <p>Clustering the Visium data</p> <pre><code>clus_model = sp.SpatialCluster()\n</code></pre> <pre><code>cortex_clus_annotations = clus_model.fit_predict(st_array = st_df,\n                                                 x_cord = st_X,\n                                                 y_cord = st_Y,n_cluster=20)\nst_data.obs.loc[:,\"SpatialPrompt: clusters\"] = cortex_clus_annotations\n</code></pre> <pre><code>Spatial clustering:  |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [100%] in 2.9s (1.74/s) \nExecuted in 2.88875675201416 second\n</code></pre> <pre><code>sc.pl.spatial(st_data,color=(\"SpatialPrompt: clusters\"),\n              library_id='V1_Mouse_Brain_Sagittal_Anterior',\n              palette=\"tab20\")\n</code></pre> <p></p>"},{"location":"Tutorials/Tutorial_2_DLPFC/","title":"Tutorial.2.Human-DLPFC-Visium","text":"<p>In this tutorial, we will perform spatial deconvolution and spatial clustering using 10X Visium human dorsolaterl prefrontal cortex (DLPFC) dataset. For this tutorial slide 151673 was choosen. The spatial data have gold standard manual annotations of seven cortical layer (layer-1 to layer-6 and white matter).scRNA-seq reference obtained from GEO (accession id: GSE144136). </p>"},{"location":"Tutorials/Tutorial_2_DLPFC/#install-libraries","title":"Install libraries","text":"<pre><code>!pip install scanpy\n!pip install spatialprompt\n!pip install gdown\n</code></pre>"},{"location":"Tutorials/Tutorial_2_DLPFC/#import-necessary-libraries","title":"Import necessary libraries","text":"<pre><code>import pandas as pd\nimport scanpy as sc\nimport spatialprompt as sp\nimport numpy as np\nimport urllib\n</code></pre>"},{"location":"Tutorials/Tutorial_2_DLPFC/#data-download","title":"Data Download","text":""},{"location":"Tutorials/Tutorial_2_DLPFC/#here-the-original-scrna-seq-data-have-78886-cells-and-30062-genes-due-to-limited-ram-offered-by-colab-the-reference-data-was-trimmed-to-10000-cells-and-5000-high-variance-genes","title":"Here the original scRNA-seq data have 78,886 cells and 30,062 genes. Due to limited ram offered by colab the reference data was trimmed to 10,000 cells and 5,000 high variance genes.","text":""},{"location":"Tutorials/Tutorial_2_DLPFC/#due-to-trim-down-the-reference-result-in-the-manuscript-and-the-result-we-see-here-may-vary-slightly","title":"Due to trim down the reference, result in the manuscript and the result we see here may vary slightly.","text":""},{"location":"Tutorials/Tutorial_2_DLPFC/#if-the-user-have-to-trim-down-the-reference-dont-trim-the-cell-type-have-less-counts","title":"If the user have to trim down the reference, don't trim the cell type have less counts.","text":"<pre><code>!gdown https://drive.google.com/uc?id=1RcC0lu_rmVxcElRFWuTPbm12z94IwLQx\n!gdown https://drive.google.com/uc?id=1jG9s91hTf1JeFheHHzsNN6Mk13qOjt6e\n!gunzip libd_sc_obj.gz\n!gunzip libd_st_obj.gz\n</code></pre> <pre><code>Downloading...\nFrom: https://drive.google.com/uc?id=1RcC0lu_rmVxcElRFWuTPbm12z94IwLQx\nTo: /content/libd_sc_obj.gz\n100% 16.0M/16.0M [00:00&lt;00:00, 34.5MB/s]\nDownloading...\nFrom: https://drive.google.com/uc?id=1jG9s91hTf1JeFheHHzsNN6Mk13qOjt6e\nTo: /content/libd_st_obj.gz\n100% 28.0M/28.0M [00:01&lt;00:00, 21.5MB/s]\n</code></pre>"},{"location":"Tutorials/Tutorial_2_DLPFC/#read-the-data","title":"Read the data","text":"<pre><code>sc_data = sc.read_h5ad(\"libd_sc_obj\")\nst_data = sc.read_h5ad(\"libd_st_obj\")\n</code></pre> <pre><code>/usr/local/lib/python3.10/dist-packages/anndata/_core/anndata.py:1838: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n  utils.warn_names_duplicates(\"obs\")\n/usr/local/lib/python3.10/dist-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n  utils.warn_names_duplicates(\"var\")\n</code></pre> <pre><code>st_data\n</code></pre> <pre><code>AnnData object with n_obs \u00d7 n_vars = 3639 \u00d7 33538\n    obs: 'in_tissue', 'array_row', 'array_col', 'layer', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes'\n    var: 'gene_ids', 'feature_types', 'genome', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts'\n    uns: 'layer_colors', 'spatial'\n    obsm: 'spatial'\n</code></pre>"},{"location":"Tutorials/Tutorial_2_DLPFC/#plot-the-data","title":"Plot the data","text":"<pre><code>sc.pl.spatial(st_data,color=\"layer\")\n</code></pre> <pre><code>sc_df = sc_data.X\nsc_genes = sc_data.var_names\nsc_labels = sc_data.obs.loc[:,\"labels\"]\nst_df = st_data.X.toarray()\nst_genes = st_data.var_names\nst_X = st_data.obs.array_row\nst_Y = st_data.obs.array_col\n</code></pre>"},{"location":"Tutorials/Tutorial_2_DLPFC/#spatial-deconvolution","title":"Spatial Deconvolution","text":"<pre><code>deconvolution_model = sp.SpatialDeconvolution()\n</code></pre> <p>Here, spot_ratio was choosen as [0,0,1] as the cell-types comprised of multiple sub-celltypes. So for simulation, we will simulate spots by randomly aggregating cells. Other parameters put as it is.</p> <pre><code>cortex_predict = deconvolution_model.predict_cell_prop(sc_array = sc_df,\n                                                       st_array = st_df,\n                                                       sc_genes = sc_genes,\n                                                      st_genes = st_genes,\n                                                       sc_labels = sc_labels,\n                                                       x_cord = st_X,\n                                                       y_cord = st_Y,\n                                                       spot_ratio= [0,0,1])\n</code></pre> <pre><code>Preprocessing Datasets : |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [100%] in 2.0s (3.03/s) \n4682 Common Genes Found 1000 HVGs Retained\nSimulate Spatial Spots : |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25586/25586 [100%] in 13.7s (1871.05/s) \n25586 Spatial Spots Simulated\nCapturing spatial microenvironment relation: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [100%] in 6.5s (0.77/s) \nSpot Denvolution: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [100%] in 11.2s (0.45/s) \nTotal Time spent: 33.45342397689819 Sec\n</code></pre> <pre><code>#Insert the cell type proportions into the spatial object\nfor i in cortex_predict.columns:\n    st_data.obs.loc[:,i] = np.array(cortex_predict.loc[:,i])\n</code></pre> <pre><code>st_data\n</code></pre> <pre><code>AnnData object with n_obs \u00d7 n_vars = 3639 \u00d7 33538\n    obs: 'in_tissue', 'array_row', 'array_col', 'layer', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'Ex_10_L2_4', 'Ex_1_L5_6', 'Ex_2_L5', 'Ex_3_L4_5', 'Ex_4_L_6', 'Ex_5_L5', 'Ex_6_L4_6', 'Ex_7_L4_6', 'Ex_8_L5_6', 'Ex_9_L5_6', 'SpatialPrompt: clusters'\n    var: 'gene_ids', 'feature_types', 'genome', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts'\n    uns: 'layer_colors', 'spatial', 'SpatialPrompt: clusters_colors'\n    obsm: 'spatial'\n</code></pre> <pre><code>sc.pl.spatial(st_data,\n              color=('Ex_10_L2_4', 'Ex_1_L5_6', 'Ex_2_L5', 'Ex_3_L4_5', 'Ex_4_L_6', 'Ex_5_L5', 'Ex_6_L4_6', 'Ex_7_L4_6', 'Ex_8_L5_6', 'Ex_9_L5_6'))\n</code></pre> <p></p> <pre><code>from sklearn.metrics import mean_squared_error,roc_auc_score,normalized_mutual_info_score,adjusted_rand_score\ndef metric_libd(predict):\n    dictio ={}\n    results = {}\n    dictio['Ex_9_L5_6'] = [\"Layer6\",\"Layer5\"]\n    dictio['Ex_8_L5_6'] = [\"Layer6\",\"Layer5\"]\n    dictio['Ex_7_L4_6'] = [\"Layer6\",\"Layer4\"]\n    dictio['Ex_6_L4_6'] = [\"Layer6\",\"Layer4\"]\n    dictio['Ex_5_L5'] = [\"Layer5\"]\n    dictio['Ex_4_L_6'] = [\"Layer6\"]\n    dictio['Ex_3_L4_5'] = [\"Layer4\",\"Layer5\"]\n    dictio['Ex_2_L5']=[\"Layer5\"]\n    dictio['Ex_1_L5_6']=[\"Layer6\",\"Layer5\"]\n    dictio['Ex_10_L2_4']=[\"Layer4\",\"Layer2\"]\n    for i in dictio.keys():\n        layers = dictio[i]\n        binary_layer = [1 if j in layers else 0 for j in np.array(st_data.obs.layer)]\n        ypred = predict.loc[:,i]\n        auroc = roc_auc_score(binary_layer, ypred)\n        results[i]=auroc\n    return results\n</code></pre> <pre><code>sp_prompt = metric_libd(cortex_predict)\n</code></pre> <pre><code>sp_prompt\n</code></pre> <pre><code>{'Ex_9_L5_6': 0.6637322366873818,\n 'Ex_8_L5_6': 0.830693844414161,\n 'Ex_7_L4_6': 0.5970737580484741,\n 'Ex_6_L4_6': 0.5381567132025175,\n 'Ex_5_L5': 0.7123181094504434,\n 'Ex_4_L_6': 0.9585830892982186,\n 'Ex_3_L4_5': 0.9314685754520786,\n 'Ex_2_L5': 0.6756835016767544,\n 'Ex_1_L5_6': 0.7681178540017592,\n 'Ex_10_L2_4': 0.5274225803684403}\n</code></pre> <pre><code>np.mean(list(sp_prompt.values()))\n</code></pre> <pre><code>0.7203250262600228\n</code></pre>"},{"location":"Tutorials/Tutorial_2_DLPFC/#spatial-clustering","title":"Spatial Clustering","text":"<pre><code>clus_model = sp.SpatialCluster()\n</code></pre> <pre><code>cortex_clus_annotations = clus_model.fit_predict(st_array = st_df,\n                                                 x_cor = st_X,\n                                                 y_cor = st_Y,n_cluster=7)\nst_data.obs.loc[:,\"SpatialPrompt: clusters\"] = cortex_clus_annotations\n</code></pre> <pre><code>Spatial clustering:  |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [100%] in 1.9s (2.68/s) \nExecuted in 1.8699700832366943 second\n</code></pre> <pre><code>sc.pl.spatial(st_data,color=(\"SpatialPrompt: clusters\"),\n              palette=\"tab20\")\n</code></pre> <pre><code>valids = ~pd.isna(st_data.obs.layer)\nprint(normalized_mutual_info_score(cortex_clus_annotations[valids],st_data.obs.layer[valids]))\n</code></pre> <pre><code>0.7081776384943014\n</code></pre>"}]}